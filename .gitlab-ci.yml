stages:
  - test
  - deploy


variables:
  PROJECT_NAME: shark-chess
  MAIN_BRANCH: $CI_DEFAULT_BRANCH
  GITHUB_CLONE: git@github.com:svnv-svsv-jm/chess-rl.git


# -----------
# Testing
# -----------
# PyTest
pytest:
  parallel:
    matrix:
      - IMAGE: ['python:3.10']
  image: $IMAGE
  stage: test
  only:
    - merge_requests
    - develop
  before_script:
    - apt-get update -qy  # Update package lists
    - apt-get install -y apt-utils
    - apt-get install -y stockfish polyglot xboard  # Install stockfish
    - pip install --upgrade pip virtualenv
    - virtualenv .venv
    - source .venv/bin/activate
    - make install
  script:
    - export CHESS_ENGINE_EXECUTABLE="/usr/games/stockfish"
    - chmod 777 "$CHESS_ENGINE_EXECUTABLE"
    - make test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  interruptible: true

# -----------
# Automatic
# -----------
# Automatically try to push to `main` branch
update-main:
  # stage: deploy
  only:
    - develop
  script:
    - git fetch origin
    - git checkout $MAIN_BRANCH
    - git merge origin/develop
    - git push origin $MAIN_BRANCH
# update-main:
#   # stage: deploy
#   before_script:
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$GIT_SSH_PRIV_KEY")
#     - git config --global user.name "svnv-svsv-jm"
#     - git config --global user.email "janmail1990@gmail.com"
#     - mkdir -p ~/.ssh
#     - ssh-keyscan gitlab.com >> gitlab-known-hosts
#     - cat gitlab-known-hosts >> ~/.ssh/known_hosts
#   script:
#     - git clone git@gitlab.com:EsmailELBoBDev2/SimplyTranslate-Web.git ST 
#     - cd ST
#     - git checkout txtarea-patch
#     - git merge master
#     - git push origin txtarea-patch

# -----------
# Release
# -----------
# Build the wheel and pass the current package version to the release job
# The wheel is pushed to Nexus only if we are on main/master
prepare-release:
  image: python:3.10.10
  stage: deploy
  only:
    - main
    - tags
    # - merge_requests # for debug
  script:
    - bash scripts/install-system-packages.sh
    - make install
    - PACKAGE_VERSION=$(poetry run python -c "import pkg_resources; print(pkg_resources.get_distribution('$PROJECT_NAME').version)")
    - echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> variables.env
    - poetry build
    - pip install twine
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        echo "Uploading to Nexus...";
        echo "TAG=latest" >> variables.env
        TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
      elif [ -n "$CI_COMMIT_TAG" ]; then
        echo "TAG=v$PACKAGE_VERSION" >> variables.env
      else
        echo "Not uploading to Nexus because branch is $CI_COMMIT_BRANCH"
        echo "TAG=debug-v$CI_MERGE_REQUEST_ID" >> variables.env
      fi
  artifacts:
    expire_in: 1 week
    paths:
      - dist/*.whl
    # Use artifacts:reports:dotenv to expose the variables to other jobs
    reports:
      dotenv: variables.env

# Creates a release, with the current package version from the prepare-release job
release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: deploy
  dependencies:
    - prepare-release
  needs: # to get the package version
    - job: prepare-release
      artifacts: true
  only:
    - main # only execute the release if the pipeline runs for the main branch
    # - merge_requests # for debug
  script:
    - echo "Package version $PACKAGE_VERSION"
    - echo "Tag $TAG"
  release:
    name: 'Release $TAG'
    description: 'Created using the release-cli'
    tag_name: '$TAG'
    ref: '$CI_COMMIT_SHA'

# -----------
# Container Image
# -----------
# We build and push the new image
build:
  stage: deploy
  when: on_success
  tags:
    - dind
  only:
    - main
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$PROJECT_NAME -f $DOCKERFILE .
    - docker push $CI_REGISTRY_IMAGE/$PROJECT_NAME:latest