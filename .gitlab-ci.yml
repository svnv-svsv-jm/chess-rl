stages:
  - test
  - deploy


variables:
  PROJECT_NAME: chess-rl


# -----------
# Testing
# -----------
# PyTest
pytest-python:
  parallel:
    matrix:
      - IMAGE: ['python:3.10.10']
  image: $IMAGE
  stage: test
  only:
    - merge_requests
  before_script:
    - pip install --upgrade pip virtualenv
    - virtualenv /$PROJECT_NAME
    - source /$PROJECT_NAME/bin/activate
    - make install
  script:
    - make pytest


# -----------
# Release
# -----------
# Build the wheel and pass the current package version to the release job
# The wheel is pushed to Nexus only if we are on main/master
prepare_release:
  image: python:3.10.10
  stage: deploy
  only:
    - main
    - tags
    # - merge_requests # for debug
  script:
    - bash scripts/install-system-packages.sh
    - make install
    - PACKAGE_VERSION=$(poetry run python -c "import pkg_resources; print(pkg_resources.get_distribution('$PROJECT_NAME').version)")
    - echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> variables.env
    - poetry build
    - pip install twine
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        echo "Uploading to Nexus...";
        echo "TAG=latest" >> variables.env
        TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
      elif [ -n "$CI_COMMIT_TAG" ]; then
        echo "TAG=v$PACKAGE_VERSION" >> variables.env
      else
        echo "Not uploading to Nexus because branch is $CI_COMMIT_BRANCH"
        echo "TAG=debug-v$CI_MERGE_REQUEST_ID" >> variables.env
      fi
  artifacts:
    expire_in: 1 week
    paths:
      - dist/*.whl
    # Use artifacts:reports:dotenv to expose the variables to other jobs
    reports:
      dotenv: variables.env

# Creates a release, with the current package version from the prepare_release job
release-job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: deploy
  dependencies:
    - prepare_release
  needs: # to get the package version
    - job: prepare_release
      artifacts: true
  only:
    - main # only execute the release if the pipeline runs for the main branch
    # - merge_requests # for debug
  script:
    - echo "Package version $PACKAGE_VERSION"
    - echo "Tag $TAG"
  release:
    name: 'Release $TAG'
    description: 'Created using the release-cli'
    tag_name: '$TAG'
    ref: '$CI_COMMIT_SHA'
